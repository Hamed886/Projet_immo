import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import warnings
warnings.filterwarnings("ignore")  # Ignore warnings for cleaner output
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))  # Add current directory to path


st.set_page_config(page_title="Exploration des Donn√©es", layout="wide")

st.title("üîç Exploration des Donn√©es Enrichies")

st.markdown("## üß¨ Sources de Donn√©es Mobilis√©es")
st.markdown("""
Notre jeu de donn√©es a √©t√© constitu√© √† partir de **plusieurs sources compl√©mentaires**, toutes d√©taill√©es dans le rapport final :

- üè† **Annonces immobili√®res** : base brute des biens en vente sur le Haut-Rhin (prix, surface, caract√©ristiques, DPE‚Ä¶)
- üìä **Donn√©es INSEE** : variables socio-d√©mographiques, √©quipements, commerces, sant√©, culture, mobilit√©
- üí∂ **Revenu fiscal de r√©f√©rence** : indicateur du pouvoir d‚Äôachat local
- üó∫Ô∏è **Informations g√©ographiques** : codes postaux, noms de communes, zones urbaines/rurales
- üìå **Enrichissements m√©tiers** : scores synth√©tiques (√©conomie, sant√©, culture), ratios de dotation communale, donn√©es de criminalit√©
- üìà **Donn√©es DVF** : valeurs fonci√®res pour les s√©ries temporelles et pr√©visions de prix
""")

st.markdown('## üéØ Objectif')            
st.markdown("""

**Objectif** : montrer les insights les plus significatifs

**Visualisations s√©lectionn√©es** :
1. Aper√ßu rapide du dataset
2. Taux de valeurs manquantes
3. Distribution du `prix_m2_vente` (cible de la mod√©lisation)
4. Impact de la classe √©nerg√©tique (DPE)
5. Corr√©lations entre variables num√©riques

‚û°Ô∏è Donn√©es utilis√©es : `annonces_ventes_enrichies_rvf_bpe.csv`
""")

try:
    # Chargement du fichier enrichi final utilis√© pour le rapport
    df = pd.read_csv("data/annonces_ventes_enrichies_rvf_bpe.csv", sep=";", encoding="latin1")
    st.success("‚úÖ Donn√©es charg√©es avec succ√®s.")

    # S√©lection rapide de colonnes pertinentes si pr√©sentes
    st.markdown("### üßæ Aper√ßu rapide du dataset (5 premi√®res lignes)")
    st.dataframe(df.head())

    # Nettoyage l√©ger : filtrer les valeurs aberrantes de prix_m2 pour lisibilit√©
    if "prix_m2_vente" in df.columns:
        df = df[df["prix_m2_vente"].between(500, 8000)]

    # 1Ô∏è‚É£ Taux de valeurs manquantes
    st.markdown("### 1Ô∏è‚É£ Analyse rapide des valeurs manquantes")
    na_percent = df.isna().mean().sort_values(ascending=False) * 100
    na_filtered = na_percent[na_percent > 5]

    if not na_filtered.empty:
        st.dataframe(na_filtered.round(1).to_frame(name="Taux de NA (%)"))
        st.markdown("""
        Certaines variables pr√©sentent un taux significatif de valeurs manquantes :  
        - `dpeL` : classe √©nerg√©tique, √† recoder ou exclure selon les cas  
        - `surface_terrain`, `loyer`, `balcon` : souvent absentes, mais peu influentes sur la cible `prix_m2_vente`
        """)

    # 2Ô∏è‚É£ Distribution du prix au m¬≤ (log scale)
    st.markdown("### 2Ô∏è‚É£ Distribution du Prix au m¬≤ (log scale)")
    st.markdown("""
    La variable `prix_m2_vente` est la **cible principale** du projet.  
    Cette distribution log-normale justifie le recours √† une transformation logarithmique et au filtrage des outliers.
    """)
    fig1, ax1 = plt.subplots(figsize=(10, 4))
    log_prices = np.log10(df["prix_m2_vente"])
    sns.histplot(log_prices, bins=50, kde=True, ax=ax1, color="#1f77b4")
    ax1.set_title("Distribution du prix au m¬≤ (log10)", fontsize=14)
    ax1.set_xlabel("log‚ÇÅ‚ÇÄ(prix_m2) ‚Üí √©chelle logarithmique", fontsize=12)
    ax1.set_ylabel("Nombre d‚Äôoccurrences", fontsize=12)
    ax1.grid(True, which="both", linestyle="--", linewidth=0.5)

    # Annotation facultative pour la soutenance
    median_val = np.median(df["prix_m2_vente"])
    ax1.axvline(np.log10(median_val), color='red', linestyle='--')
    ax1.text(np.log10(median_val)+0.1, ax1.get_ylim()[1]*0.9,
         f"M√©diane : {int(median_val)} ‚Ç¨/m¬≤", color="red")
    ax1.set_xscale("log")
    ax1.set_title("Distribution du prix au m¬≤ (log scale)")
    st.pyplot(fig1)

    st.markdown("""
    La distribution du prix_m2 est fortement asym√©trique et suit une loi log-normale, comme souvent en immobilier.
    La transformation logarithmique permet d‚Äôatt√©nuer cette asym√©trie, de stabiliser la variance, et de rendre les mod√®les plus robustes.
    La m√©diane √† 2 582 ‚Ç¨/m¬≤ est retenue comme valeur de r√©f√©rence pour les visualisations.
    Le filtrage des valeurs extr√™mes (outliers) permet de mieux visualiser la distribution sans les points extr√™mes qui pourraient fausser l‚Äôanalyse.
    """)

    # 3Ô∏è‚É£ Analyse du DPE (classe √©nerg√©tique)
    if "dpeL" in df.columns:
        st.markdown("### 2Ô∏è‚É£ Impact du DPE sur le prix au m¬≤")
        st.markdown("""
        Le **DPE (Diagnostic de Performance √ânerg√©tique)** est une variable cat√©gorielle ordinale importante.  
        Elle impacte la valeur per√ßue d‚Äôun bien ‚Üí plus la classe est basse (A, B‚Ä¶), plus le bien est valoris√©.
        """)

        # D√©finir un ordre explicite des classes DPE
        ordre_dpe = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'NS', 'VI', '0']
        df['dpeL'] = pd.Categorical(df['dpeL'], categories=ordre_dpe, ordered=True)
        fig2, ax2 = plt.subplots(figsize=(8, 4))
        sns.boxplot(data=df, x="dpeL", y="prix_m2_vente", ax=ax2, order=ordre_dpe, palette="Set2")
        ax2.set_title("Boxplot prix_m2 selon la classe DPE (dpeL)")
        st.pyplot(fig2)

    st.markdown("""
    Les biens class√©s A, B, C pr√©sentent une valeur m√©diane plus √©lev√©e, ce qui traduit une meilleure valorisation √† la vente.
    √Ä l‚Äôinverse, les biens class√©s F ou G sont en moyenne moins chers.
    On observe aussi une forte dispersion des prix, surtout pour les classes A √† D, ce qui sugg√®re l‚Äôinfluence crois√©e d‚Äôautres variables (localisation, surface, etc.).
    Les modalit√©s comme "NS", "0", "VI" (non sp√©cifi√©, vide ou invalide) doivent √™tre trait√©es ou filtr√©es en amont pour ne pas biaiser le mod√®le.
    """)

    # 4Ô∏è‚É£ Matrice de corr√©lation entre variables num√©riques
    st.markdown("### 4Ô∏è‚É£ Corr√©lation entre les variables num√©riques")
    st.markdown("""
    La matrice de corr√©lation permet de visualiser les redondances et liens lin√©aires entre variables quantitatives.  
    Cela permet de guider la **s√©lection de features** et de d√©tecter la multicolin√©arit√©.
    """)
    numeric_df = df.select_dtypes(include=["float64", "int64"]).dropna(axis=1)
    corr_matrix = numeric_df.corr()

    fig3, ax3 = plt.subplots(figsize=(12, 8))
    sns.heatmap(corr_matrix, annot=False, cmap="coolwarm", fmt=".2f", ax=ax3)
    ax3.set_title("Matrice de corr√©lation des variables num√©riques")
    st.pyplot(fig3)

    st.markdown("""
    L‚Äôanalyse de la matrice de corr√©lation montre :
    - Une corr√©lation mod√©r√©e entre prix_m2_vente et le revenu fiscal moyen
    - Les scores socio-√©conomiques li√©s √† l‚Äô√©ducation, la culture, la sant√©, etc.
    - Des relations faibles ou nulles entre plusieurs variables, justifiant l‚Äôusage de mod√®les complexes (for√™ts al√©atoires, boosting).
    - Une colin√©arit√© forte entre surface, nb_pieces, prix_bien, mensualiteFinance ainsi que les paires *_brut et *_ratio_1000 des indicateurs INSEE
    """)

except Exception as e:
    st.error(f"‚ùå Erreur lors du chargement ou traitement des donn√©es : {e}")

    st.markdown("""
    L‚Äôanalyse de la matrice de corr√©lation montre :
    - Une corr√©lation mod√©r√©e entre prix_m2_vente et le revenu fiscal moyen
    - Les scores socio-√©conomiques li√©s √† l‚Äô√©ducation, la culture, la sant√©, etc.
Des relations faibles ou nulles entre plusieurs variables, justifiant l‚Äôusage de mod√®les complexes (for√™ts al√©atoires, boosting).
Une colin√©arit√© forte entre :

surface, nb_pieces, prix_bien, mensualiteFinance

Les paires *_brut et *_ratio_1000 des indicateurs INSEE
    """)

# 5Ô∏è‚É£ Conclusion
st.markdown("## Conclusion de l'exploration")
st.markdown("""
Cette exploration des donn√©es a permis de mettre en lumi√®re plusieurs insights cl√©s :
- La distribution des prix au m¬≤ r√©v√®le des disparit√©s importantes selon les zones g√©ographiques et les caract√©ristiques des biens.
- Le DPE appara√Æt comme un facteur d√©terminant de la valorisation immobili√®re, avec des classes √©nerg√©tiques plus √©lev√©es corr√©l√©es √† des prix plus √©lev√©s.
- La matrice de corr√©lation a mis en √©vidence des relations int√©ressantes entre certaines variables, tout en soulignant la n√©cessit√© d'approches de mod√©lisation avanc√©es pour capturer la complexit√© des interactions.
""")

# 6Ô∏è‚É£ Liens utiles
st.markdown("## üîóLiens utiles")
st.markdown("""
- [Donn√©es DVF](https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres/)
- [Base permanente des √©quipements](https://www.insee.fr/fr/statistiques/2011101)
""")

# 7Ô∏è‚É£ Affichage du rapport df d'exploration
import os
import streamlit as st
import streamlit.components.v1 as components

st.markdown("## üìÑ Rapport d'exploration des donn√©es")
file_name = "data/rapport_DF.html"

if not os.path.exists(file_name):
    st.error(f"‚ùå Le fichier `{file_name}` est introuvable. V√©rifie le chemin ou g√©n√®re le rapport.")
else:
    with st.expander("‚ÑπÔ∏è √Ä propos du rapport", expanded=True):
        st.markdown(f"**‚úÖ Rapport g√©n√©r√© :** `{file_name}`")
        st.markdown("Ce rapport contient une **analyse exploratoire compl√®te** :")
        st.markdown("- Statistiques descriptives")
        st.markdown("- Visualisations automatiques")
        st.markdown("- Analyse des corr√©lations")
        st.markdown("- D√©tection des valeurs manquantes")
    
    with open(file_name, "r", encoding="utf-8") as f:
        html_content = f.read()

    # üí° Affichage int√©gr√© du rapport HTML
    st.markdown("---")
    components.html(html_content, height=1000, scrolling=True)